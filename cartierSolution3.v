(**#+TITLE: cartierSolution3.v

Proph

https://gitee.com/OOO1337777/cartier/blob/master/cartierSolution3.v

solves half of some question of Cartier which is how to program grammatical polymorph metafunctors-full-subcategory containing-equalizers generated by some views ( "complete" ) ...

TODO: ?inductive-recursive? , ssreflect-style data-class  , visible assumption of functional-extensionality for transf ... end: show sense infers grammatical-conversion

-----

Keywords : 1337777.OOO ; COQ ; cut-elimination ; equalizers ; limits ; polymorph metafunctors-grammar

-----

eth 0x54810dcb93b37DBE874694407f78959Fa222D920 ; paypal 1337777.OOO@gmail.com ; wechatpay 2796386464@qq.com ; amazon amazon.com/hz/wishlist/ls/28SN02HR4EB8W ; irc #OOO1337777

**)

(**TMP USER-MANUAL

```

POSSIBLE : internal , generator , image , union ,


```

end : grammatical metafunctors full-subcategory filled-equalizers generated by some views

Inductive obCoMod (* obCoMod *) : Type.2 := 
| View : forall A : obIndexer, obCoMod
| Equa : forall (F G : obCoMod) (transfL transfR : { _ : forall A : obIndexer, Yoneda0 F A -> Yoneda0 G A & (pf : _ ) }), obCoMod
with Yoneda00 : obCoMod -> obIndexer -> Type.1
with Yoneda01 : F : obCoMod -> forall A A' (a : 'Indexer(A ~> A')), Yoneda0 F A' -> Yoneda0 F A
Yoneda0 (View B) A := 'Indexer( A ~> B )
Yoneda0 (View B) a := 'Indexer( a ~> B )
Yoneda0 (Equa F0_ G0_ F1_ G1_ transfL transfR) A := { x : (F0_ A) & pfb : transfL x == transfR x } .
Yoneda0 (Equa F0_ G0_ F1_ G1_ transfL transfR) a := (F1_ a) * Use_pf (* ?  transfL x = transfR x  ->  transfL (F1_ a x) = G1_ a (transfL x) = G1_ a (transfR x) = transfR (F1_ a x)  ? *) .

Inductive morCoMod (* morCoMod *) : obCoMod -> obCoMod -> Type.?
| Yoneda_Poly (* View1 as instance *) : forall A F, Yoneda0 F A -> 'CoMod(View A ~> F)
| PolyTransf : forall (F G : obCoMod) (transf : { _ : forall A : obIndexer, Yoneda0 F A -> Yoneda0 G A & (pf : _ ) }), (forall A : obIndexer, 'CoMod(0 (View A) ~> F )0 -> 'CoMod(0 (View A) ~> G )0)
| Project1 : forall F G : obCoMod, forall (transfL transfR : 'CoMod(F ~> G)),
          'CoMod(F ~> Z) -> 'CoMod(Equa F G (Yoneda1 transfL) (Yoneda1 transfR) ~> Z)
| Pairing : forall L F G : obCoMod, forall (transfL transfR : 'CoMod(F ~> G)),
            forall (ff : 'CoMod(L ~> F)), (Yoneda1 ff) o/ (Yoneda1 transfL) =1 (Yoneda1 ff) o/ (Yoneda1 transfR) (* for colimit: (fun B (i : 'Indexer(B ~> A)) => 'Indexer( i ~> A') (a : 'Indexer(A ~> A'))) /o (Yoneda1 ffA') =1 Yoneda1 ffA *) ->
            'CoMod(L ~> Equa F G (Yoneda1 transfL) (Yoneda1 transfR))
| PolyCoMod : forall (F2 : obCoMod) (F1 : obCoMod)
  , 'CoMod(0 F2 ~> F1 )0 -> forall F1' : obCoMod,
      'CoMod(0 F1 ~> F1' )0 -> 'CoMod(0 F2 ~> F1' )0
with Yoneda10 : forall F G : obCoMod, 'CoMod(F ~> G) -> {transf: forall A : obIndexer, Yoneda0 F A -> Yoneda0 G A & Yoneda10P : forall a x, transf_A' (Yoneda0 F a x) = Yoneda0 G a (transf_A x) }
Yoneda1 (Yoneda_Poly A' F x') A := fun a : Yoneda0 (View A') A (??:= 'Indexer(A ~> A')??) => Yoneda0 F a x'
Yoneda1 (PolyTransf F G transf xx) := Yoneda1 xx o/ transf 
Yoneda1 (Project1 F G transfL transfR z) A := project1_{ x : (Yoneda0 F A) | Yoneda1 transfL A x = Yoneda1 transfR A x } o>comp (Yoneda1 z A)
Yoneda1 (Pairing L F G transfL transfR ff cond) A := fun l : Yoneda0 L A => < (Yoneda10 ff l) ,pairing Use_cond : (Yoneda1 transfL) (Yoneda10 ff l) = _ >
Yoneda1 (PolyCoMod f_ f') A := (Yoneda1 f_ A) o>comp (Yoneda1 f' A)

Inductive convCoMod : forall (F1 F2 : obCoMod),
    'CoMod(0 F1 ~> F2 )0 -> 'CoMod(0 F1 ~> F2 )0 -> Prop :=
| Yoneda_Poly (Yoneda1  f  A x) <~~ (Yoneda_Poly A _ x) o> f
   | Yoneda_Poly (Yoneda1  (Project1 F G b)  A x)  <~~ ( Yoneda_Poly A _ x ) o> ( ~_1 @ G o>CoMod b ) 
   | Yoneda_Poly (Yoneda1  (Yoneda_Poly A' F x')  A a)  <~~ ( Yoneda_Poly A _ a ) o> ( Yoneda_Poly A' F x' )
| (Yoneda1 ff) x  ~~  (PolyTransf (Yoneda1 ff)) (Yoneda_Poly x)
   | Yoneda1 (Yoneda_Poly A' F x') A a := Yoneda0 F a x'

for sense: take signature only , where [[Yoneda10]] with naturality/associativity [[Yoneda10P]] , therefore sense
 is made of [[obCoMod]] with objects P Q : [[obCoMod]] , of [[Yoneda00]] with arrows A -> P , of [[Yoneda01]] with prefix-compositions A' -> A -> P , of [[morCoMod]] with arrows P -> Q , of [[Yoneda10]] with post-compositions A -> P -> Q , of [[Yoneda10P]] with associativity / commutativity-of-precomposition-postcomposition (A' -> A -> P) -> Q  is  A' -> (A -> P -> Q) 

nat sense is: one initial object 0 , without arrows A -> 0 , with 0 -> 0 which is nat , with empty functions for precomposition [[Yoneda01]] and postcomposition[[Yoneda10]]

solution sense is: same objects ; except Poly composition , same morphisms and yoneda


| PolyCoMod : forall (F2 : obCoMod) (F1 : obCoMod)
  , 'CoMod(0 F2 ~> F1 )0 -> forall F1' : obCoMod,
      'CoMod(0 F1 ~> F1' )0 -> 'CoMod(0 F2 ~> F1' )0
| UnitCoMod : forall (F : obCoMod ), 'CoMod(0 F ~> F )0
| View_Poly : forall (C B : obIndexer), forall b : 'Indexer(0 B ~> C )0,
        'CoMod(0  (View B) ~> (View C) )0
| EqFunctor_Poly : forall  (F G : obCoMod ),
    forall transfL transfR,
    forall (B : obIndexer), forall f : {f : Yoneda00_F B & projT1 transfL B f = projT1 transfR B f}, 
        'CoMod(0  (View B) ~> (@EqFunctor _ _ F _ _ G transfL transfR) )0
| PolyYoneda00 : forall (F : obCoMod),
    forall (B : obIndexer), forall f : Yoneda00_F B, 
        'CoMod(0 (View B) ~> F )0
| PolyTransf :  forall  (F G : obCoMod), 
    forall transf : {transf : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A & _ },
    forall A Yoneda10_ff (ff : 'CoMod(0  (View A) ~> F )0),
    'CoMod(0  (View A) ~> G )0
| Project1 : forall  (F G : @obCoMod ),
    forall Yoneda10_transfL (transfL : 'CoMod(0 F ~> G )0 ),
    forall Yoneda10_transfR (transfR :  'CoMod(0 F ~> G )0 ),
    forall (Z : obCoMod) Yoneda10_z (z : 'CoMod(0 F ~> Z )0),
    'CoMod(0 (@EqFunctor _ _ F _ _ G Yoneda10_transfL Yoneda10_transfR) ~> Z )0
| Pairing :  forall (L F G : obCoMod),
    forall Yoneda10_transfL (transfL : 'CoMod(0 F ~> G )0 ),
    forall Yoneda10_transfR (transfR : 'CoMod(0 F ~> G )0 ),
    forall Yoneda10_ff (ff :'CoMod(0 L ~> F )0) Yoneda10_ff_eq,           
    'CoMod(0 L ~> (@EqFunctor _ _ F _ _ G Yoneda10_transfL Yoneda10_transfR) )0

eqfunctor_poly (yoneda01_F b f)  <~~  view0_poly b o> eqfunctor_poly f

((view0_poly b o> ff) o>Transf_ transf)  <~~  view0_poly b o> (ff o>Transf_ transf) 

<< view0_poly b o> ff , Use_ b Yoneda10_ff_eq >>  <~~  view0_poly b o> ( << ff , Yoneda10_ff_eq >> )

F_poly (yoneda10 z (projT1 f)) ..  (F_poly (projT1 f))  o> z    <~~  eqfunctor_poly f o> ( ~_1 o> z )

 (eqfunctor_poly f)  o> yoneda10 z    <~~  eqfunctor_poly f o> ( ~_1 o> z )
       (ff o>Transf_ transf) o> (yoneda_poly hh) 
ff o>Transf_ (fun h => yoneda01_View (transf h) b)  <~~  (ff o>Transf_ transf) o> (view0_poly b) 
ff o>Transf_ (fun h => yoneda01_Eq (transf h) f)  <~~  (ff o>Transf_ transf) o> (eqfunctor_poly f) 
`````

|| PolyYoneda00_PolyYoneda00 : (yoneda01_F a f : view0 A' ~> F)  <~~  (poly_yoneda00 a : view0 A' ~> view0 A) o> (poly_yoneda00 f : view0 A ~> F)

|| PolyTransf_morphismPre : ((aa o> ff) o>Transf_ transf)  <~~  (aa : view0 A' ~> view0 A) o> (ff o>Transf_ transf : view0 A ~> G)_gen 
 
    --- ((poly_yoneda00 a o> ff) o>Transf_ transf)  <~~  (poly_yoneda00 a : view0 B ~> view0 A) o> (ff o>Transf_ transf : view0 A ~> G)_gen 

|| PolyYoneda00_Project1 : (poly_yoneda00 (projT1 f) : view0 B ~> F) o> z  <~~  (poly_yoneda00 f : view0 B ~> EqFunc F G ) o> ( ~_1 o> z : EqFunc F G ~> Z )_gen

|| Pairing_morphism : << ll o> ff , Use_ b Yoneda10_ff_eq >>  <~~  ( ll ) o> ( << ff , Yoneda10_ff_eq >> : L ~> EqFun F G )_gen

    --- << poly_yoneda00 l o> ff , Use_ b Yoneda10_ff_eq >>  <~~  ( poly_yoneda00 l : view0 B ~> L )_gen o> ( << ff , Yoneda10_ff_eq >> : L ~> EqFun F G )_gen

    --- (ff : view0 A ~> F) o>Transf_ ( (fun x => yoneda01_H (transf x) h) : forall C, yoneda00_F C -> yoneda00_H C )  <~~  (ff o>Transf_ (transf : forall C, yoneda00_F C -> yoneda00_View B C) : view0 A ~> view0 B) o> (poly_yoneda00 h : view0 B ~> H) 
   View A  -ff->  F  -transf->  View B  -h->  H

   --- ((ff : A ~> F) o>Transf_ (transf : F ~> B) : view0 A ~> view0 B) o> ((ff : B ~> C) o>Transf_ transf : view0 C ~> H) 
A -ff1-> F -transf1-> B -ff2-> C -transf2-> H

|| PolyYoneda00_PolyTransf :  poly_yoneda00 (transf f)   <~~  ( (poly_yoneda00 f : A ~> F)_gen o>Transf_ (transf : F ~> G)_gen  : A ~> G ) 

|| Pairing_PolyTransf : poly_yoneda00 (transf (yoneda10_ff 1_B))  <~~  ( ( << ff , _ >> : B ~> EqFun F G)_gen o>Transf_ (transf : EqFun F G ~> H)  : B ~> H ) 

|| Project1_morphism : ( ~_1 o> ((z : F ~> Z) o> w) )  <~~  ( ~_1 o> (z : F ~> Z) )_gen o> w

|| Pairing_Project1 :  (ff : L ~> F) o> z  <~~  ( << ff : L ~> F , _ >> : L ~> EqFun F G )_gen o> ( ~_1 o> (z : F ~> Z) )

 **)

(**

#+BEGIN_SRC coq :exports both :results silent **)

From mathcomp Require Import ssreflect ssrfun ssrbool eqtype ssrnat seq choice fintype tuple.
Require Import Setoid.
Require Omega.
Require Import Equality.

Module EQUALIZERS.

Set Implicit Arguments.
Unset Strict Implicit.
Unset Printing Implicit Defensive.
 
Parameter obIndexer : Type.
Parameter morIndexer : obIndexer -> obIndexer -> Type.
Parameter polyIndexer : forall A A', morIndexer A' A -> forall A'', morIndexer A'' A' -> morIndexer A'' A .
Parameter unitIndexer : forall {A : obIndexer}, morIndexer A A.

Notation "''Indexer' (0 A' ~> A )0" :=
  (@morIndexer A' A) (at level 25, format "''Indexer' (0  A'  ~>  A  )0").
Notation "a_ o>Indexer a'" := (@polyIndexer _ _ a' _ a_) (at level 25, right associativity).

Axiom polyIndexer_morphism :
  forall (A A' : obIndexer) (a' : 'Indexer(0 A' ~> A )0) 
    (A'' : obIndexer) (a_ : 'Indexer(0 A'' ~> A' )0),
  forall B (b : 'Indexer(0 B ~> A'' )0),
      b o>Indexer ( a_ o>Indexer a' ) = ( b o>Indexer a_ ) o>Indexer a' .

Axiom polyIndexer_unitIndexer :
  forall (A A' : obIndexer) (a' : 'Indexer(0 A' ~> A )0),
    a' = ( (@unitIndexer A') o>Indexer a' ) .

Axiom unitIndexer_polyIndexer :
  forall (A : obIndexer), forall (A'' : obIndexer) (a_ : 'Indexer(0 A'' ~> A )0),
    a_ = ( a_ o>Indexer (@unitIndexer A) ) .

Lemma Yoneda00_View :
  forall (B : obIndexer),
    (obIndexer -> Type).
Proof. intros B. refine (fun A => 'Indexer(0 A ~> B )0 ). Defined.

Definition Yoneda01_functor (Yoneda00 : obIndexer -> Type)
           (Yoneda01 : (forall A A', 'Indexer(0 A' ~> A )0 -> Yoneda00 A -> Yoneda00 A')) :=
  ( (* binary/composing functoriality *)
    ( forall A A' (a : 'Indexer(0 A' ~> A)0) A'' (a' : 'Indexer(0 A'' ~> A')0) x,
        Yoneda01 _ _ a' (Yoneda01 _ _ a x) = Yoneda01 _ _ (a' o>Indexer a) x ) /\
    ( (* empty/unit functoriality is held only in PolyYoneda00_Pairing *)
      forall A x, x = Yoneda01 _ _ (@unitIndexer A) x ) ) .

Definition Yoneda10_natural
           Yoneda00_F (Yoneda01_F : { Yoneda01 : (forall A A', 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A') & Yoneda01_functor Yoneda01 })
           Yoneda00_G (Yoneda01_G : { Yoneda01 : (forall A A', 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A') & Yoneda01_functor Yoneda01 })
           (Yoneda10 : forall A , Yoneda00_F A -> Yoneda00_G A) :=
  forall A A' (a : 'Indexer(0 A' ~> A )0) (f : Yoneda00_F A), (projT1 Yoneda01_G) _ _ a (Yoneda10 A f) = Yoneda10 A' ((projT1 Yoneda01_F) _ _ a f) .

Lemma Yoneda01_View : forall
(B : obIndexer),
{Yoneda01
  : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> (Yoneda00_View B) A -> (Yoneda00_View B) A' ) &
    Yoneda01_functor Yoneda01} .
Proof.
  intros.
  exists (fun A A' a x => a o>Indexer x).
  abstract (split; [intros; exact: polyIndexer_morphism | intros; exact: polyIndexer_unitIndexer]).
Defined.

Axiom ax1 : forall (A : Type) (P : A -> Type) (x : A) (xP : P x)(y : A) (yP : P y), x = y -> existT P x xP = existT P y yP .

Lemma Yoneda00_EqFunctor : forall
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01 : forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
Yoneda01_functor Yoneda01})
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01 : forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
Yoneda01_functor Yoneda01})
(transfL transfR :
{transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
Yoneda10_natural Yoneda01_F Yoneda01_G transf}),
(obIndexer -> Type) .
Proof.
  intros until 2. refine ((fun A => {f : Yoneda00_F A & projT1 transfL A f = projT1 transfR A f})).
Defined.

Lemma Yoneda01_EqFunctor : forall
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01
: (forall A A' : obIndexer,'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A') &
  Yoneda01_functor Yoneda01})
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01
: (forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A') &
  Yoneda01_functor Yoneda01})
(transfL transfR :
{transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
Yoneda10_natural Yoneda01_F Yoneda01_G transf}),
{Yoneda01
  : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_EqFunctor transfL transfR A ->
    Yoneda00_EqFunctor transfL transfR A' ) &
    Yoneda01_functor Yoneda01}.
Proof.
  unshelve eexists. intros A A' a f. exists  ((projT1 Yoneda01_F) _ _ a (projT1 f)).
  abstract (simpl in *; rewrite -(projT2 transfL) -(projT2 transfR) (projT2 f); reflexivity).
  abstract (simpl; split; [intros; apply: ax1 ; apply: (proj1 (projT2 Yoneda01_F))
                          | move => A [x x_eq]; apply: ax1 ; apply: (proj2 (projT2 Yoneda01_F)) ]). 
Defined.

Lemma Yoneda10_PolyYoneda00 : forall 
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
            Yoneda01_functor Yoneda01 })
(B : obIndexer)
(f : Yoneda00_F B),
{Yoneda10 : ( forall A : obIndexer, Yoneda00_View B A -> Yoneda00_F A ) &
            Yoneda10_natural (Yoneda01_View B) Yoneda01_F Yoneda10} .
Proof.
  intros. exists (fun A b => projT1 Yoneda01_F _ _  b f) .
  abstract (intros; move; intros; apply: (proj1 (projT2 Yoneda01_F))).
Defined.

Lemma Yoneda10_PolyCoMod : forall
  (Yoneda00_F1 : obIndexer -> Type)
  (Yoneda01_F1 :
     {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F1 A -> Yoneda00_F1 A' ) &
                 Yoneda01_functor Yoneda01} )
(Yoneda00_F2 : obIndexer -> Type)
(Yoneda01_F2 :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F2 A -> Yoneda00_F2 A' ) &
Yoneda01_functor Yoneda01 })
(Yoneda10_ff_ :
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F1 A -> Yoneda00_F2 A ) &
            Yoneda10_natural Yoneda01_F1 Yoneda01_F2 Yoneda10 })
(Yoneda00_F2' : obIndexer -> Type)
(Yoneda01_F2' :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F2' A -> Yoneda00_F2' A' ) &
Yoneda01_functor Yoneda01})
(Yoneda10_ff' :
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F2 A -> Yoneda00_F2' A ) &
Yoneda10_natural Yoneda01_F2 Yoneda01_F2' Yoneda10}),
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F1 A -> Yoneda00_F2' A ) &
            Yoneda10_natural Yoneda01_F1 Yoneda01_F2' Yoneda10}.
Proof.
  intros. exists (fun A => (projT1 Yoneda10_ff') A \o (projT1 Yoneda10_ff_) A ).
  abstract (intros; move; intros; simpl; rewrite (projT2 Yoneda10_ff') (projT2 Yoneda10_ff_); reflexivity).
Defined.

Lemma Yoneda10_Pairing : forall
(Yoneda00_L : obIndexer -> Type)
(Yoneda01_L :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' ) &
Yoneda01_functor Yoneda01 })
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F : {Yoneda01 : forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
Yoneda01_functor Yoneda01})
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' ) &
Yoneda01_functor Yoneda01})
(Yoneda10_transfL :
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
 Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10 })
(Yoneda10_transfR :
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
 Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10 })
(Yoneda10_ff :
{Yoneda10 : ( forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A ) &
 Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10 })
(Yoneda10_ff_eq : (forall A, (projT1 Yoneda10_transfL) A \o (projT1 Yoneda10_ff) A
                        =1 (projT1 Yoneda10_transfR) A \o (projT1 Yoneda10_ff) A)),
{Yoneda10
  : ( forall A : obIndexer, Yoneda00_L A -> (Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR) A ) &
    Yoneda10_natural Yoneda01_L  (Yoneda01_EqFunctor Yoneda10_transfL Yoneda10_transfR) Yoneda10 }.  
Proof.
  intros. unshelve eexists. intros A l. exists (projT1 Yoneda10_ff A l).
  abstract (exact: Yoneda10_ff_eq).
  abstract (intros; move; intros; simpl; apply: ax1; exact: (projT2 Yoneda10_ff)).
Defined.

Lemma Yoneda10_PolyTransf : forall
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
Yoneda01_functor Yoneda01 })
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' ) &
Yoneda01_functor Yoneda01 })
(transf :
{transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
Yoneda10_natural Yoneda01_F Yoneda01_G transf })
(A : obIndexer)
(Yoneda10_ff :
{Yoneda10 : ( forall A0 : obIndexer, 'Indexer(0 A0 ~> A )0 -> Yoneda00_F A0 ) &
Yoneda10_natural (Yoneda01_View A) Yoneda01_F Yoneda10 }) ,  
{Yoneda10 : ( forall A0 : obIndexer, 'Indexer(0 A0 ~> A )0 -> Yoneda00_G A0 ) &
Yoneda10_natural (Yoneda01_View A) Yoneda01_G Yoneda10 } .
Proof.
  intros. exists (fun A' => (projT1 transf) A' \o (projT1 Yoneda10_ff) A' ).
  abstract (intros; move; intros; simpl in * ; rewrite (projT2 transf) (projT2 Yoneda10_ff) ; reflexivity).
Defined.

Lemma Yoneda10_UnitCoMod : forall
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
Yoneda01_functor Yoneda01 }),
{Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_F A ) &
Yoneda10_natural Yoneda01_F Yoneda01_F Yoneda10 } .
Proof. intros. exists (fun A => id). abstract (intros; move; intros; reflexivity). Defined.

Lemma Yoneda10_Project1 : 
  forall (Yoneda00_F : obIndexer -> Type)
    (Yoneda01_F : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
                              Yoneda01_functor Yoneda01 })
    (Yoneda00_G : obIndexer -> Type)
    (Yoneda01_G : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' ) &
                              Yoneda01_functor Yoneda01 })
    (Yoneda10_transfL
     Yoneda10_transfR : {transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                  Yoneda10_natural Yoneda01_F Yoneda01_G transf }),
    forall (Yoneda00_Z : obIndexer -> Type)
    (Yoneda01_Z : {Yoneda01 : (forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' ) &
                              Yoneda01_functor Yoneda01 }),
      forall Yoneda10_z : {transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A ) &
                               Yoneda10_natural Yoneda01_F Yoneda01_Z transf }, 
{transf : ( forall A : obIndexer, (Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR) A -> Yoneda00_Z A ) &
Yoneda10_natural (Yoneda01_EqFunctor Yoneda10_transfL Yoneda10_transfR) Yoneda01_Z transf } .
Proof.
  intros.  exists (fun A f => (projT1 Yoneda10_z A) ((projT1 f))).
  abstract (intros; move; intros; rewrite (projT2 Yoneda10_z); reflexivity).
Defined.

Inductive obCoMod : forall Yoneda00 : obIndexer -> Type,
    { Yoneda01 : ( forall A A', 'Indexer(0 A' ~> A )0 -> Yoneda00 A -> Yoneda00 A' ) &
                 Yoneda01_functor Yoneda01 } -> Type := 

| View : forall B : obIndexer,
    @obCoMod (Yoneda00_View B) (Yoneda01_View B)

| EqFunctor : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F ),
    forall Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G ),
    forall (transfL transfR : { transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G transf }),
      @obCoMod (Yoneda00_EqFunctor transfL transfR) (Yoneda01_EqFunctor transfL transfR) .

(**
   PolyYoneda00 : View A ~> F
   PolyTransf : View A ~> G
   Project1 : EqFunctor F G Yoneda10_transfL Yoneda10_transfR ~> Z
   Pairing : L ~> EqFunctor F G Yoneda10_transfL Yoneda10_transfR
 **)

Reserved Notation "''CoMod' (0 F' ~> F @ Yoneda10 )0" (at level 0, format "''CoMod' (0  F'  ~>  F  @  Yoneda10  )0").

Inductive morCoMod
    : forall (Yoneda00_F : obIndexer -> Type)
        (Yoneda01_F : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
                                  Yoneda01_functor Yoneda01}),
      obCoMod Yoneda01_F ->
      forall (Yoneda00_G : obIndexer -> Type)
        (Yoneda01_G : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' ) &
                                  Yoneda01_functor Yoneda01}),
      obCoMod Yoneda01_G ->
      {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                  Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10} -> Type :=

| PolyCoMod : forall (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                  (Yoneda00_F' : obIndexer -> Type)
                  (Yoneda01_F' : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F' A -> Yoneda00_F' A' &
                                 Yoneda01_functor Yoneda01}) (F' : obCoMod Yoneda01_F')
                  (Yoneda10_ff' : {Yoneda10 : forall A : obIndexer, Yoneda00_F' A -> Yoneda00_F A &
                                  Yoneda10_natural Yoneda01_F' Yoneda01_F Yoneda10}),
                'CoMod(0 F' ~> F @ Yoneda10_ff' )0 ->
                forall (Yoneda00_F'' : obIndexer -> Type)
                  (Yoneda01_F'' : {Yoneda01
                                  : forall A A' : obIndexer,
                                    'Indexer(0 A' ~> A )0 -> Yoneda00_F'' A -> Yoneda00_F'' A' &
                                  Yoneda01_functor Yoneda01}) (F'' : obCoMod Yoneda01_F'')
                  (Yoneda10_ff_ : {Yoneda10 : forall A : obIndexer, Yoneda00_F'' A -> Yoneda00_F' A &
                                  Yoneda10_natural Yoneda01_F'' Yoneda01_F' Yoneda10}),
                'CoMod(0 F'' ~> F' @ Yoneda10_ff_ )0 ->
                'CoMod(0 F'' ~> F @ Yoneda10_PolyCoMod Yoneda10_ff_ Yoneda10_ff' )0

| UnitCoMod : forall (Yoneda00_F : obIndexer -> Type)
                  (Yoneda01_F : {Yoneda01
                                : forall A A' : obIndexer,
                                  'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F),
                'CoMod(0 F ~> F @ Yoneda10_UnitCoMod Yoneda01_F )0

| PolyYoneda00 : forall (Yoneda00_F : obIndexer -> Type)
                     (Yoneda01_F : {Yoneda01
                                   : forall A A' : obIndexer,
                                     'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                   Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                     (A : obIndexer) (f : Yoneda00_F A),
                   'CoMod(0 View A ~> F @ Yoneda10_PolyYoneda00 Yoneda01_F f )0

| PolyTransf : forall (Yoneda00_F : obIndexer -> Type)
                   (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                   (Yoneda00_G : obIndexer -> Type)
                   (Yoneda01_G : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                                 Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                   (transf : {transf : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                             Yoneda10_natural Yoneda01_F Yoneda01_G transf}) 
                   (A : obIndexer)
                   (Yoneda10_ff : {Yoneda10
                                  : forall A0 : obIndexer, Yoneda00_View A A0 -> Yoneda00_F A0 &
                                  Yoneda10_natural (Yoneda01_View A) Yoneda01_F Yoneda10}),
                 'CoMod(0 View A ~> F @ Yoneda10_ff )0 ->
                 'CoMod(0 View A ~> G @ Yoneda10_PolyTransf transf Yoneda10_ff )0

(* similar as inclusion , similar as restriction *)
| Project1 : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
               'CoMod(0 F ~> G @ Yoneda10_transfL )0 ->
               forall Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10},
               'CoMod(0 F ~> G @ Yoneda10_transfR )0 ->
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10}),
               'CoMod(0 F ~> Z @ Yoneda10_zz )0 ->
               'CoMod(0 EqFunctor F G Yoneda10_transfL Yoneda10_transfR ~> Z @ 
               Yoneda10_Project1 Yoneda10_transfL Yoneda10_transfR Yoneda10_zz )0

(* similar as corestriction of codomain ; 
   similar as internalization-as-second-component of external equation *)
| Pairing : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
              'CoMod(0 F ~> G @ Yoneda10_transfL )0 ->
              forall Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10},
              'CoMod(0 F ~> G @ Yoneda10_transfR )0 ->
              forall Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10},
              'CoMod(0 L ~> F @ Yoneda10_ff )0 ->
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
              'CoMod(0 L ~> EqFunctor F G Yoneda10_transfL Yoneda10_transfR @ 
              Yoneda10_Pairing Yoneda10_ff_eq )0

where "''CoMod' (0 F' ~> F @ Yoneda10 )0" := (@morCoMod _ _ F' _ _ F Yoneda10). 

Notation "''CoMod' (0 F' ~> F )0" := (@morCoMod _ _ F' _ _ F _) (at level 0, only parsing, format "''CoMod' (0  F'  ~>  F  )0").

Notation "ff_ o>CoMod ff'" :=
  (@PolyCoMod _ _ _ _ _ _ _ ff' _ _ _ _ ff_) (at level 25, right associativity).

Notation "'uCoMod'" := (@UnitCoMod _ _ _)(at level 0).

Notation "@ 'uCoMod' F" :=
  (@UnitCoMod _ _ F) (at level 11, only parsing).

Notation "ff o>Transf_ transf @ G" :=
  (@PolyTransf _ _ _ _ _ G transf _ _ ff) (at level 25, transf at level 0, right associativity).

Notation "ff o>Transf_ transf" :=
  (@PolyTransf _ _ _ _ _ _ transf _ _ ff) (at level 25, transf at level 0, right associativity).

Notation "~_1 @ transfL , transfR o>CoMod zz" :=
  (@Project1 _ _ _ _ _ _ _ transfL _ transfR _ _ _ _ zz) (at level 25, transfL at next level , transfR at next level).

Notation "~_1 o>CoMod zz" :=
  (@Project1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ zz) (at level 25).

Notation "<< ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >>" :=
  (@Pairing _ _ _ _ _ _ _ _ _ _ transfL _ transfR _ ff Yoneda10_ff_eq) (at level 0).

Notation "<< ff ,CoMod Yoneda10_ff_eq >>" :=
  (@Pairing _ _ _ _ _ _ _ _ _ _ _ _ _ _ ff Yoneda10_ff_eq) (at level 0).

Notation "<< ff @ transfL , transfR >>" :=
  (@Pairing _ _ _ _ _ _ _ _ _ _ transfL _ transfR _ ff _) (at level 0).

Notation "<< ff ,CoMod >>" :=
  (@Pairing _ _ _ _ _ _ _ _ _ _ _ _ _ _ ff _) (at level 0).

Lemma Yoneda10_Pairing_morphism_eq : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
                forall (Yoneda00_L' : obIndexer -> Type)
                  (Yoneda01_L' : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L' A -> Yoneda00_L' A' &
                              Yoneda01_functor Yoneda01}) (L' : obCoMod Yoneda01_L'),
                forall (Yoneda10_ll : {Yoneda10 : forall A : obIndexer, Yoneda00_L' A -> Yoneda00_L A &
                              Yoneda10_natural Yoneda01_L' Yoneda01_L Yoneda10})
                  (ll : 'CoMod(0 L' ~> L @ Yoneda10_ll )0),
  
forall A : obIndexer,
  projT1 Yoneda10_transfL A \o
    projT1 (Yoneda10_PolyCoMod Yoneda10_ll Yoneda10_ff) A
  =1 projT1 Yoneda10_transfR A \o
    projT1 (Yoneda10_PolyCoMod Yoneda10_ll Yoneda10_ff) A .
Proof. intros. move. intro l. apply: Yoneda10_ff_eq. Defined.

Lemma Yoneda10_eq_Yoneda00_EqFunctor :
 forall (B : obIndexer)
   (Yoneda00_F : obIndexer -> Type)
   (Yoneda01_F : {Yoneda01
                  : forall A A' : obIndexer,
                     'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                      Yoneda01_functor Yoneda01})
   (Yoneda00_G : obIndexer -> Type)
   (Yoneda01_G : {Yoneda01
                  : forall A A' : obIndexer,
                     'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                      Yoneda01_functor Yoneda01})
   (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                        Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
 forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                       Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
 forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_View B A -> Yoneda00_F A &
                 Yoneda10_natural (Yoneda01_View B) Yoneda01_F Yoneda10}),

 forall (Yoneda10_ff_eq : forall A : obIndexer,
       projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
       =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A),  
   Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR B.
Proof. intros. exact: ( ( existT _ (projT1 Yoneda10_ff _ (@unitIndexer B)) (Yoneda10_ff_eq B (@unitIndexer B)) ) ). Defined. 

Lemma Yoneda10_Proj1_eq : forall
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01
: forall A A' : obIndexer,
  'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
Yoneda01_functor Yoneda01})
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01
: forall A A' : obIndexer,
  'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
Yoneda01_functor Yoneda01})
(Yoneda10_transfL :
{Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
(Yoneda10_transfR :
{Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
  forall A : obIndexer,
    projT1 Yoneda10_transfL A \o
           projT1
           (Yoneda10_Project1 Yoneda10_transfL Yoneda10_transfR
                              (Yoneda10_UnitCoMod Yoneda01_F)) A
    =1 projT1 Yoneda10_transfR A \o
       projT1
       (Yoneda10_Project1 Yoneda10_transfL Yoneda10_transfR
                          (Yoneda10_UnitCoMod Yoneda01_F)) A .
Proof.
  intros. move. intros [f f_eq]. simpl. apply: f_eq.
Defined.

Reserved Notation "gg' <~~ gg" (at level 70).

Lemma PolyYoneda00_Pairing_EqFunctor : forall
(A : obIndexer)
(Yoneda00_F : obIndexer -> Type)
(Yoneda01_F :
{Yoneda01
: forall A A' : obIndexer,
  'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
Yoneda01_functor Yoneda01})
(Yoneda00_G : obIndexer -> Type)
(Yoneda01_G :
{Yoneda01
: forall A A' : obIndexer,
  'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
Yoneda01_functor Yoneda01})
(Yoneda10_transfL :
{Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
(Yoneda10_transfR :
{Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
(f : Yoneda00_F A)
(Yoneda10_ff_eq : forall A0 : obIndexer,
    projT1 Yoneda10_transfL A0 \o
           projT1 (Yoneda10_PolyYoneda00 Yoneda01_F f) A0
    =1 projT1 Yoneda10_transfR A0 \o projT1 (Yoneda10_PolyYoneda00 Yoneda01_F f) A0),
Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR A .
Proof.
  intros A. intros until Yoneda10_transfR. intros f.
  exists f .
  rewrite [f](proj2 (projT2 Yoneda01_F)). apply: (Yoneda10_ff_eq A (@unitIndexer A)).
Defined.

Inductive convCoMod
    : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F),
    forall Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G),
    forall (Yoneda10_gg : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                 Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      ( gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
    forall (Yoneda10_gg0 : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                  Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      ( gg0 : 'CoMod(0 F ~> G @ Yoneda10_gg0 )0 ), Prop :=

| convCoMod_Refl : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F)
       Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G)
       Yoneda10_gg (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
    gg <~~ gg

| convCoMod_Trans : forall (Yoneda00_F : obIndexer -> Type)
        (Yoneda01_F : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                      Yoneda01_functor Yoneda01})
      (F : obCoMod Yoneda01_F),
      forall (Yoneda00_G : obIndexer -> Type)
        (Yoneda01_G : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                      Yoneda01_functor Yoneda01})
      (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
      forall (Yoneda10_uTrans : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (uTrans : 'CoMod(0 F ~> G @ Yoneda10_uTrans )0 ),
        ( uTrans <~~ gg ) ->
      forall (Yoneda10_gg0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg0 : 'CoMod(0 F ~> G @ Yoneda10_gg0 )0 ),
        ( gg0 <~~ uTrans ) -> ( gg0 <~~ gg )
        
(**  assumed functional-extensionality for transf , therefore no extra congruences ref transf **)
  
| PolyCoMod_cong_Pre : forall (Yoneda00_F' : obIndexer -> Type)
                  (Yoneda01_F' : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F' A -> Yoneda00_F' A' &
                                 Yoneda01_functor Yoneda01}) (F' : obCoMod Yoneda01_F')
                  (Yoneda00_F : obIndexer -> Type)
                  (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                  (Yoneda10_ff' : {Yoneda10 : forall A : obIndexer, Yoneda00_F' A -> Yoneda00_F A &
                                  Yoneda10_natural Yoneda01_F' Yoneda01_F Yoneda10})
                (ff' : 'CoMod(0 F' ~> F @ Yoneda10_ff' )0),
                forall (Yoneda00_F'' : obIndexer -> Type)
                  (Yoneda01_F'' : {Yoneda01
                                  : forall A A' : obIndexer,
                                    'Indexer(0 A' ~> A )0 -> Yoneda00_F'' A -> Yoneda00_F'' A' &
                                  Yoneda01_functor Yoneda01}) (F'' : obCoMod Yoneda01_F'')
                  (Yoneda10_ff_ : {Yoneda10 : forall A : obIndexer, Yoneda00_F'' A -> Yoneda00_F' A &
                                  Yoneda10_natural Yoneda01_F'' Yoneda01_F' Yoneda10})
                  (ff_ : 'CoMod(0 F'' ~> F' @ Yoneda10_ff_ )0),
                  forall (Yoneda10_ff_0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F'' A -> Yoneda00_F' A &
                                   Yoneda10_natural Yoneda01_F'' Yoneda01_F' Yoneda10})
                  (ff_0 : 'CoMod(0 F'' ~> F' @ Yoneda10_ff_0 )0),
                  ff_0 <~~ ff_ -> ( ff_0 o>CoMod ff' ) <~~ ( ff_ o>CoMod ff' )

| PolyCoMod_cong_Post : forall (Yoneda00_F' : obIndexer -> Type)
                  (Yoneda01_F' : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F' A -> Yoneda00_F' A' &
                                 Yoneda01_functor Yoneda01}) (F' : obCoMod Yoneda01_F')
                  (Yoneda00_F : obIndexer -> Type)
                  (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                  (Yoneda10_ff' : {Yoneda10 : forall A : obIndexer, Yoneda00_F' A -> Yoneda00_F A &
                                  Yoneda10_natural Yoneda01_F' Yoneda01_F Yoneda10})
                (ff' : 'CoMod(0 F' ~> F @ Yoneda10_ff' )0),
                forall (Yoneda00_F'' : obIndexer -> Type)
                  (Yoneda01_F'' : {Yoneda01
                                  : forall A A' : obIndexer,
                                    'Indexer(0 A' ~> A )0 -> Yoneda00_F'' A -> Yoneda00_F'' A' &
                                  Yoneda01_functor Yoneda01}) (F'' : obCoMod Yoneda01_F'')
                  (Yoneda10_ff_ : {Yoneda10 : forall A : obIndexer, Yoneda00_F'' A -> Yoneda00_F' A &
                                  Yoneda10_natural Yoneda01_F'' Yoneda01_F' Yoneda10})
                  (ff_ : 'CoMod(0 F'' ~> F' @ Yoneda10_ff_ )0),
                forall (Yoneda10_ff'0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F' A -> Yoneda00_F A &
                                  Yoneda10_natural Yoneda01_F' Yoneda01_F Yoneda10})
                  (ff'0 : 'CoMod(0 F' ~> F @ Yoneda10_ff'0 )0),
                  ff'0 <~~ ff' -> ( ff_ o>CoMod ff'0 ) <~~ ( ff_ o>CoMod ff' )

| PolyTransf_cong : forall (Yoneda00_F : obIndexer -> Type)
                   (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                   (Yoneda00_G : obIndexer -> Type)
                   (Yoneda01_G : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                                 Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                   (transf : {transf : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                             Yoneda10_natural Yoneda01_F Yoneda01_G transf}) 
                   (A : obIndexer)
                   (Yoneda10_ff : {Yoneda10
                                  : forall A0 : obIndexer, Yoneda00_View A A0 -> Yoneda00_F A0 &
                                  Yoneda10_natural (Yoneda01_View A) Yoneda01_F Yoneda10})
                   (ff : 'CoMod(0 View A ~> F @ Yoneda10_ff )0),
                 forall (Yoneda10_ff0 : {Yoneda10
                                  : forall A0 : obIndexer, Yoneda00_View A A0 -> Yoneda00_F A0 &
                                  Yoneda10_natural (Yoneda01_View A) Yoneda01_F Yoneda10})
                   (ff0 : 'CoMod(0 View A ~> F @ Yoneda10_ff0 )0),
                   ff0 <~~ ff ->
                   ( ff0 o>Transf_ transf @ G ) <~~ ( ff o>Transf_ transf @ G )

| Project1_cong : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),
               forall (Yoneda10_zz0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz0 : 'CoMod(0 F ~> Z @ Yoneda10_zz0 )0),
                 zz0 <~~ zz ->
                 ( ~_1 @ transfL , transfR o>CoMod zz0 )
                   <~~ ( ~_1 @ transfL , transfR o>CoMod zz )

| Project1_cong_transfL : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),
                 forall (transfL0 : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
                 transfL0 <~~ transfL ->
                 ( ~_1 @ transfL0 , transfR o>CoMod zz )
                   <~~ ( ~_1 @ transfL , transfR o>CoMod zz )

| Project1_cong_transfR : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),
                 forall (transfR0 : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
                 transfR0 <~~ transfR ->
                 ( ~_1 @ transfL , transfR0 o>CoMod zz )
                   <~~ ( ~_1 @ transfL , transfR o>CoMod zz )

| Pairing_cong : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
              forall (Yoneda10_ff0 : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff0 : 'CoMod(0 L ~> F @ Yoneda10_ff0 )0),
              forall Yoneda10_ff0_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff0 A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff0 A,
                ff0 <~~ ff ->
                ( << ff0 ,CoMod Yoneda10_ff0_eq @ transfL , transfR >> )
                  <~~ ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )

| Pairing_cong_transfL : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
                forall (transfL0 : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
                  transfL0 <~~ transfL ->
                ( << ff ,CoMod Yoneda10_ff_eq @ transfL0 , transfR >> )
                  <~~ ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )

| Pairing_cong_transfR : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
                forall (transfR0 : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
                  transfR0 <~~ transfR ->
                ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR0 >> )
                  <~~ ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )

| UnitCoMod_PolyCoMod : forall (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_gg : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0),
    gg <~~ gg o>CoMod (uCoMod)

| PolyCoMod_UnitCoMod : forall (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_gg : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0),
    gg <~~ (uCoMod) o>CoMod gg

| PolyTransf_UnitCoMod : forall (B : obIndexer)
                   (Yoneda00_G : obIndexer -> Type)
                   (Yoneda01_G : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                                 Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                   (transf : {transf : forall A : obIndexer, (Yoneda00_View B) A -> Yoneda00_G A &
                             Yoneda10_natural (Yoneda01_View B) Yoneda01_G transf}),

        ( PolyYoneda00 G (projT1 transf _ (@unitIndexer B)) )
          <~~ ( (@uCoMod (View B)) o>Transf_ transf @ G )

| PolyYoneda00_PolyYoneda00 : forall (Yoneda00_F : obIndexer -> Type)
                     (Yoneda01_F : {Yoneda01
                                   : forall A A' : obIndexer,
                                     'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                   Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                     (A : obIndexer) (f : Yoneda00_F A) A' (a : Yoneda00_View A A'),
    ( PolyYoneda00 F (projT1 Yoneda01_F A A' a f) )
      <~~ ( (PolyYoneda00 (View A) a) o>CoMod (PolyYoneda00 F f) )

| PolyTransf_morphism : forall (Yoneda00_F : obIndexer -> Type)
                   (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                   (Yoneda00_G : obIndexer -> Type)
                   (Yoneda01_G : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                                 Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                   (transf : {transf : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                             Yoneda10_natural Yoneda01_F Yoneda01_G transf}) 
                   (A : obIndexer)
                   (Yoneda10_ff : {Yoneda10
                                  : forall A0 : obIndexer, Yoneda00_View A A0 -> Yoneda00_F A0 &
                                  Yoneda10_natural (Yoneda01_View A) Yoneda01_F Yoneda10})
                   (ff : 'CoMod(0 View A ~> F @ Yoneda10_ff )0),
    forall A' (Yoneda10_aa : {Yoneda10 : forall A0 : obIndexer, Yoneda00_View A' A0 -> Yoneda00_View A A0 & Yoneda10_natural (Yoneda01_View A') (Yoneda01_View A) Yoneda10})
                   (aa : 'CoMod(0 View A' ~> View A @ Yoneda10_aa )0),

      ( (aa o>CoMod ff) o>Transf_ transf @ G )
        <~~ ( aa o>CoMod (ff o>Transf_ transf @ G) )
    
| PolyYoneda00_Project1 : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
               (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),
               forall (B : obIndexer) (f : Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR B),

                 ( (PolyYoneda00 F (projT1 f)) o>CoMod zz )
                   <~~ ( (PolyYoneda00 (EqFunctor F G Yoneda10_transfL Yoneda10_transfR) f)
                           o>CoMod ( ~_1 @ transfL , transfR o>CoMod zz ) )

| Pairing_morphism : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall (Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A),
              forall (Yoneda00_L' : obIndexer -> Type)
                (Yoneda01_L' : {Yoneda01
                                : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L' A -> Yoneda00_L' A' &
                              Yoneda01_functor Yoneda01}) (L' : obCoMod Yoneda01_L'),
              forall (Yoneda10_ll : {Yoneda10 : forall A : obIndexer, Yoneda00_L' A -> Yoneda00_L A &
                              Yoneda10_natural Yoneda01_L' Yoneda01_L Yoneda10})
                (ll : 'CoMod(0 L' ~> L @ Yoneda10_ll )0),

                ( << ll o>CoMod ff ,CoMod (Yoneda10_Pairing_morphism_eq transfL transfR ff Yoneda10_ff_eq ll) @ transfL , transfR >> )
                  <~~ ( ll o>CoMod << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )

| PolyYoneda00_PolyTransf : forall (Yoneda00_F : obIndexer -> Type)
                   (Yoneda01_F : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                 Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                   (Yoneda00_G : obIndexer -> Type)
                   (Yoneda01_G : {Yoneda01
                                 : forall A A' : obIndexer,
                                   'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                                 Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                   (transf : {transf : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                             Yoneda10_natural Yoneda01_F Yoneda01_G transf}) 
                   (A : obIndexer),
      forall (f : Yoneda00_F A),

        ( PolyYoneda00 G (projT1 transf _ f) )
          <~~ ( (PolyYoneda00 F f) o>Transf_ transf @ G )

| Pairing_PolyTransf : forall (B : obIndexer)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
              (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_View B A -> Yoneda00_F A &
                              Yoneda10_natural (Yoneda01_View B) Yoneda01_F Yoneda10})
              (ff : 'CoMod(0 View B ~> F @ Yoneda10_ff )0),
              forall (Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A),
              forall (Yoneda00_H : obIndexer -> Type)
                (Yoneda01_H : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_H A -> Yoneda00_H A' &
                              Yoneda01_functor Yoneda01}) (H : obCoMod Yoneda01_H)
                (transf : {transf : forall A : obIndexer, Yoneda00_EqFunctor Yoneda10_transfL Yoneda10_transfR A -> Yoneda00_H A &
                             Yoneda10_natural (Yoneda01_EqFunctor Yoneda10_transfL Yoneda10_transfR) Yoneda01_H transf}),

                (PolyYoneda00 H (projT1 transf _ (Yoneda10_eq_Yoneda00_EqFunctor Yoneda10_ff_eq) ))
                  <~~ ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> o>Transf_ transf @ H )
                
| Project1_morphism : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
               (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
               (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
               (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),
               forall (Yoneda00_Y : obIndexer -> Type)
                 (Yoneda01_Y : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Y A -> Yoneda00_Y A' &
                               Yoneda01_functor Yoneda01}) (Y : obCoMod Yoneda01_Y)
                 (Yoneda10_yy : {Yoneda10 : forall A : obIndexer, Yoneda00_Z A -> Yoneda00_Y A &
                                Yoneda10_natural Yoneda01_Z Yoneda01_Y Yoneda10})
               (yy : 'CoMod(0 Z ~> Y @ Yoneda10_yy )0),
                 ( ~_1 @ transfL , transfR o>CoMod (zz o>CoMod yy) )
                   <~~ ( ( ~_1 @ transfL , transfR o>CoMod zz ) o>CoMod yy )

| Pairing_Project1 : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
                (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall (Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A),
              forall (_transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0)
                (_transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0)
                (Yoneda00_Z : obIndexer -> Type)
                (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0),

                ( ff o>CoMod zz )
                  <~~ ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )
                        o>CoMod ( ~_1 @ _transfL , _transfR o>CoMod zz ) )

(* for sense *)
| PolyYoneda00_Pairing : forall (A : obIndexer)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (f : Yoneda00_F A),
              forall Yoneda10_ff_eq : forall A0 : obIndexer,
                                 projT1 Yoneda10_transfL A0 \o projT1 (Yoneda10_PolyYoneda00 Yoneda01_F f) A0
                                 =1 projT1 Yoneda10_transfR A0 \o projT1 (Yoneda10_PolyYoneda00 Yoneda01_F f) A0,

                ( PolyYoneda00 (EqFunctor F G Yoneda10_transfL Yoneda10_transfR) (PolyYoneda00_Pairing_EqFunctor Yoneda10_ff_eq) (* exist _ f _ *) )
                <~~ ( << (PolyYoneda00 F f) ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )


(* for sense *)
| Project1_Project1Eq_Pairing : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
               forall (_transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0)
                 (_transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),

                 (*ALT: more general , already knowing the existence :  
                   forall Yoneda10_Proj1_eq,  *)
                 (@uCoMod (EqFunctor F G Yoneda10_transfL Yoneda10_transfR))
                   <~~ ( << ( ~_1 @ transfL , transfR o>CoMod uCoMod )
                       ,CoMod (@Yoneda10_Proj1_eq _ _ _ _ Yoneda10_transfL Yoneda10_transfR)
                              @ _transfL , _transfR >> )

(* for confluence  *)
| Project1_Pairing : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10})
                (ff : 'CoMod(0 L ~> F @ Yoneda10_ff )0),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
                forall (Yoneda00_H : obIndexer -> Type)
                  (Yoneda01_H : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_H A -> Yoneda00_H A' &
                              Yoneda01_functor Yoneda01}) (H : obCoMod Yoneda01_H)
                  (Yoneda10_transfL' : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_H A &
                                    Yoneda10_natural Yoneda01_L Yoneda01_H Yoneda10})
                  (transfL' : 'CoMod(0 L ~> H @ Yoneda10_transfL' )0),
                forall (Yoneda10_transfR' : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_H A &
                                   Yoneda10_natural Yoneda01_L Yoneda01_H Yoneda10})
                  (transfR' : 'CoMod(0 L ~> H @ Yoneda10_transfR' )0), 

                  ( << ( ~_1 @ transfL' , transfR' o>CoMod ff )
                  ,CoMod (Yoneda10_Pairing_morphism_eq transfL transfR ff Yoneda10_ff_eq ( ~_1 @ transfL' , transfR' o>CoMod uCoMod )) @ transfL , transfR >> )
                  <~~ ( ~_1 @ transfL' , transfR' o>CoMod ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> ) )

where "gg' <~~ gg" := (@convCoMod _ _ _ _ _ _ _ gg _ gg').

Hint Constructors convCoMod.

Lemma convCoMod_sense
    : forall (Yoneda00_F : obIndexer -> Type)
        (Yoneda01_F : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                      Yoneda01_functor Yoneda01})
      (F : obCoMod Yoneda01_F),
      forall (Yoneda00_G : obIndexer -> Type)
        (Yoneda01_G : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                      Yoneda01_functor Yoneda01})
      (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
      forall (Yoneda10_gg0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg0 : 'CoMod(0 F ~> G @ Yoneda10_gg0 )0 ),
        gg0 <~~ gg ->  forall A0, (projT1 Yoneda10_gg0 A0) =1 (projT1 Yoneda10_gg A0) (* shall prop eq *) .
Proof.
  intros until gg0. intros conv_gg.
  elim : Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg gg Yoneda10_gg0 gg0 / conv_gg .
  - (* convCoMod_Refl *)  intros. move. intros f. reflexivity.
  - (* convCoMod_Trans *)  intros until 1. intros gg_eq . intros until 1. intros uTrans_eq.
    intros. move. intros f. rewrite -gg_eq -uTrans_eq . reflexivity.
  - (*  PolyCoMod_cong_Pre *)  intros until 2. intros ff__eq . intros. move. intros f''.
    rewrite /Yoneda10_PolyCoMod /= . rewrite -ff__eq. reflexivity.
  - (*  PolyCoMod_cong_Post *)  intros until 2. intros ff'_eq . intros. move. intros f''.
    rewrite /Yoneda10_PolyCoMod /= . rewrite -ff'_eq. reflexivity.
  - (* PolyTransf_cong *)  intros until 2. intros ff_eq . intros. move. intros a.
    simpl. (* rewrite /Yoneda10_PolyTransf /= . *) rewrite -ff_eq. reflexivity.
  - (* Project1_cong *)  intros until 3. intros zz_eq . intros. move. intros f.
    simpl. (* rewrite /Yoneda10_Project1 /= . *) rewrite -zz_eq. reflexivity.
  - (* Project1_cong_transfL *)  intros until 3. intros zz_eq . intros. move. intros f.
    simpl. (* rewrite /Yoneda10_Project1 /= . *) reflexivity.
  - (* Project1_cong_transfR *)  intros until 3. intros zz_eq . intros. move. intros f.
    simpl. (* rewrite /Yoneda10_Project1 /= . *) reflexivity.
  - (* Pairing_cong *)  intros until 3. intros ff_eq . intros. move. intros l.
    simpl. (* rewrite /Yoneda10_Pairing /= . *) apply: ax1. rewrite -ff_eq. reflexivity.
  - (* Pairing_cong_transfL *)  intros until 3. intros ff_eq . intros. move. intros l.
    simpl. (* rewrite /Yoneda10_Pairing /= . *) reflexivity.
  - (* Pairing_cong_transfR *)  intros until 3. intros ff_eq . intros. move. intros l.
    simpl. (* rewrite /Yoneda10_Pairing /= . *) reflexivity.
  - (* UnitCoMod_PolyCoMod *) intros. move. intros f. 
    simpl.  reflexivity.
  - (* PolyCoMod_UnitCoMod *) intros. move. intros f. 
    simpl.  reflexivity.
  - (* PolyTransf_UnitCoMod *) intros. move. intros b. 
    simpl. rewrite [LHS](projT2 transf).  simpl.
    congr 1 (projT1 transf _) . rewrite -unitIndexer_polyIndexer ; reflexivity . 
  - (* PolyYoneda00_PolyYoneda00 *) intros. move. intros a'. 
    simpl.  exact: (proj1 (projT2 Yoneda01_F)).
  - (* PolyTransf_morphism *)  intros. move. intros a'. reflexivity.
  - (* PolyYoneda00_Project1 *) intros. move. intros b. reflexivity.
  - (* Pairing_morphism *)  intros. move. intros l'. simpl. apply: ax1.
    reflexivity.
  - (*  PolyYoneda00_PolyTransf *) intros. move. intros a. simpl.
    exact: (projT2 transf). 
  - (* Pairing_PolyTransf *)  intros. move. intros b. cbn -[Yoneda10_Pairing].
    rewrite [LHS](projT2 transf).  simpl.
    congr 1 (projT1 transf _) .  apply: ax1. 
    rewrite [LHS](projT2 Yoneda10_ff). simpl. 
    rewrite -unitIndexer_polyIndexer .  reflexivity.
  - (* Project1_morphism *)  intros. move. intros f. reflexivity.
  - (*  Pairing_Project1 *) intros. move. intros l. reflexivity.
  - (* PolyYoneda00_Pairing *) intros. move. intros a.
    simpl. apply: ax1. reflexivity.
  - (* Project1_Project1Eq_Pairing *) intros. move. intros [f f_eq].
    simpl. apply: ax1. reflexivity.
  - (* Project1_Pairing *) intros. move. intros [l l_eq].
    simpl. apply: ax1. reflexivity.
Defined.

Lemma convCoMod_sense'
    : forall (Yoneda00_F : obIndexer -> Type)
        (Yoneda01_F : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                      Yoneda01_functor Yoneda01})
      (F : obCoMod Yoneda01_F),
      forall (Yoneda00_G : obIndexer -> Type)
        (Yoneda01_G : {Yoneda01
                      : forall A A' : obIndexer,
                        'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                      Yoneda01_functor Yoneda01})
      (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
      forall (Yoneda10_gg0 : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
      Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
      (gg0 : 'CoMod(0 F ~> G @ Yoneda10_gg0 )0 ),
        gg0 <~~ gg ->  Yoneda10_gg0 = Yoneda10_gg . Admitted.

Fixpoint grade Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F)
       Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G)
       Yoneda10_gg (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ) {struct gg} : nat . 
Proof.
  case : Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg / gg . 
  - intros ? ? F ? ? F' ? ff' ? ? F'' ? ff_ .
    exact: ( (S (grade _ _ _ _ _ _ _ ff' + grade _ _ _ _ _ _ _ ff_)%coq_nat ) +
             (S (grade _ _ _ _ _ _ _ ff' + grade _ _ _ _ _ _ _ ff_)%coq_nat ) )%coq_nat .
  - intros. exact: (S O).
  - intros. exact: (S O).
  - intros ? ?  F ? ? G transf A ? ff .
    exact: (S (grade _ _ _ _ _ _ _ ff)).
  - intros ? ? F ? ? G ? transfL ? transfR ? ? Z ? zz .
    exact: (S ( ( (grade _ _ _ _ _ _ _ transfL) + (grade _ _ _ _ _ _ _ transfR) )%coq_nat + (grade _ _ _ _ _ _ _ zz) )%coq_nat).
  - intros ? ? L ? ? F ? ? G ? transfL ? transfR ? ff Yoneda10_ff_eq .
    exact:  (S ( ( (grade _ _ _ _ _ _ _ transfL) + (grade _ _ _ _ _ _ _ transfR) )%coq_nat + (grade _ _ _ _ _ _ _ ff) )%coq_nat).
Defined.

Lemma grade_gt0 : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F)
       Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G)
       Yoneda10_gg (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
    ((S O) <= (grade gg))%coq_nat.
Proof.
  move => Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg gg . 
  apply/leP; case : gg; simpl; auto.
Qed.

Ltac tac_grade_gt0 :=
  match goal with
  | [ gg1 : 'CoMod(0 _ ~> _ @ _ )0 ,
            gg2 : 'CoMod(0 _ ~> _ @ _ )0 ,
                  gg3 : 'CoMod(0 _ ~> _ @ _ )0 ,
                        gg4 : 'CoMod(0 _ ~> _ @ _ )0 |- _ ] =>
    move : (@grade_gt0 _ _ _ _ _ _ _ gg1) (@grade_gt0 _ _ _ _ _ _ _ gg2)
                                          (@grade_gt0 _ _ _ _ _ _ _ gg3)
                                          (@grade_gt0 _ _ _ _ _ _ _ gg4)
  | [ gg1 : 'CoMod(0 _ ~> _ @ _ )0 ,
            gg2 : 'CoMod(0 _ ~> _ @ _ )0 ,
                  gg3 : 'CoMod(0 _ ~> _ @ _ )0 |- _ ] =>
    move : (@grade_gt0 _ _ _ _ _ _ _ gg1) (@grade_gt0 _ _ _ _ _ _ _ gg2)
                                          (@grade_gt0 _ _ _ _ _ _ _ gg3)
  | [ gg1 : 'CoMod(0 _ ~> _ @ _ )0 ,
            gg2 : 'CoMod(0 _ ~> _ @ _ )0  |- _ ] =>
    move : (@grade_gt0 _ _ _ _ _ _ _ gg1) (@grade_gt0 _ _ _ _ _ _ _ gg2)

  | [ gg1 : 'CoMod(0 _ ~> _ @ _ )0  |- _ ] =>
    move : (@grade_gt0 _ _ _ _ _ _ _ gg1) 
  end.

Lemma degrade
    : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F)
       Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G)
       Yoneda10_gg (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 )
       Yoneda10_ggDeg (ggDeg : 'CoMod(0 F ~> G @ Yoneda10_ggDeg )0 ),
    ggDeg <~~ gg -> (* without convCoMod_Refl : ( grade ggDeg < grade gg )%coq_nat *)
    ( grade ggDeg <= grade gg )%coq_nat .
Proof.
  intros until ggDeg. intros red_gg.
  elim : Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg gg Yoneda10_ggDeg ggDeg / red_gg ;
    try solve [ rewrite /= => * ;
                             abstract intuition Omega.omega ].
Qed.

Ltac tac_degrade H_grade :=
  repeat match goal with
         | [ Hred : ( _ <~~ _ ) |- _ ] =>
           move : (degrade Hred) ; clear Hred
         end;
  move: H_grade; clear; simpl in *; intros;
  try tac_grade_gt0; intros; Omega.omega.

Module Sol.

  Section Section1.

  Delimit Scope sol_scope with sol.

  (**
   PolyYoneda00 : View A ~> F
   Project1 : EqFunctor F G Yoneda10_transfL Yoneda10_transfR ~> Z
   Pairing : L ~> EqFunctor F G Yoneda10_transfL Yoneda10_transfR
   **)
  
  Inductive morCoMod
    : forall (Yoneda00_F : obIndexer -> Type)
        (Yoneda01_F : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' ) &
                                  Yoneda01_functor Yoneda01}),
      obCoMod Yoneda01_F ->
      forall (Yoneda00_G : obIndexer -> Type)
        (Yoneda01_G : {Yoneda01 : ( forall A A' : obIndexer, 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' ) &
                                  Yoneda01_functor Yoneda01}),
      obCoMod Yoneda01_G ->
      {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                  Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10} -> Type :=

  | UnitCoMod : forall (Yoneda00_F : obIndexer -> Type)
                  (Yoneda01_F : {Yoneda01
                                : forall A A' : obIndexer,
                                  'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F),
                'CoMod(0 F ~> F @ Yoneda10_UnitCoMod Yoneda01_F )0

  | PolyYoneda00 : forall (Yoneda00_F : obIndexer -> Type)
                     (Yoneda01_F : {Yoneda01
                                   : forall A A' : obIndexer,
                                     'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                   Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                     (A : obIndexer) (f : Yoneda00_F A),
                   'CoMod(0 View A ~> F @ Yoneda10_PolyYoneda00 Yoneda01_F f )0

  | Project1 : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
               'CoMod(0 F ~> G @ Yoneda10_transfL )0 ->
               forall Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10},
               'CoMod(0 F ~> G @ Yoneda10_transfR )0 ->
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10}),
               'CoMod(0 F ~> Z @ Yoneda10_zz )0 ->
               'CoMod(0 EqFunctor F G Yoneda10_transfL Yoneda10_transfR ~> Z @ 
               Yoneda10_Project1 Yoneda10_transfL Yoneda10_transfR Yoneda10_zz )0
  | Pairing : forall (Yoneda00_L : obIndexer -> Type)
                (Yoneda01_L : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_L A -> Yoneda00_L A' &
                              Yoneda01_functor Yoneda01}) (L : obCoMod Yoneda01_L)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10}),
              'CoMod(0 F ~> G @ Yoneda10_transfL )0 ->
              forall Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10},
              'CoMod(0 F ~> G @ Yoneda10_transfR )0 ->
              forall Yoneda10_ff : {Yoneda10 : forall A : obIndexer, Yoneda00_L A -> Yoneda00_F A &
                              Yoneda10_natural Yoneda01_L Yoneda01_F Yoneda10},
              'CoMod(0 L ~> F @ Yoneda10_ff )0 ->
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
              'CoMod(0 L ~> EqFunctor F G Yoneda10_transfL Yoneda10_transfR @ 
              Yoneda10_Pairing Yoneda10_ff_eq )0

  where "''CoMod' (0 F' ~> F @ Yoneda10 )0" := (@morCoMod _ _ F' _ _ F Yoneda10) : sol_scope . 
   
  End Section1.

  Module Import Ex_Notations.
    Delimit Scope sol_scope with sol.

    Notation "''CoMod' (0 F' ~> F @ Yoneda10 )0" := (@morCoMod _ _ F' _ _ F Yoneda10) : sol_scope.

    Notation "''CoMod' (0 F' ~> F )0" := (@morCoMod _ _ F' _ _ F _) (at level 0, only parsing, format "''CoMod' (0  F'  ~>  F  )0") : sol_scope.

    Notation "'uCoMod'" := (@UnitCoMod _ _ _)(at level 0) : sol_scope.

    Notation "@ 'uCoMod' F" :=
      (@UnitCoMod _ _ F) (at level 11, only parsing) : sol_scope.

    Notation "~_1 @ transfL , transfR o>CoMod zz" :=
      (@Project1 _ _ _ _ _ _ _ transfL _ transfR _ _ _ _ zz) (at level 25, transfL at next level , transfR at next level) : sol_scope.

    Notation "~_1 o>CoMod zz" :=
      (@Project1 _ _ _ _ _ _ _ _ _ _ _ _ _ _ zz) (at level 25) : sol_scope.

    Notation "<< ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >>" :=
      (@Pairing _ _ _ _ _ _ _ _ _ _ transfL _ transfR _ ff Yoneda10_ff_eq) (at level 0) : sol_scope.

    Notation "<< ff ,CoMod Yoneda10_ff_eq >>" :=
      (@Pairing _ _ _ _ _ _ _ _ _ _ _ _ _ _ ff Yoneda10_ff_eq) (at level 0) : sol_scope.

    Notation "<< ff @ transfL , transfR >>" :=
      (@Pairing _ _ _ _ _ _ _ _ _ _ transfL _ transfR _ ff _) (at level 0) : sol_scope.

    Notation "<< ff ,CoMod >>" :=
      (@Pairing _ _ _ _ _ _ _ _ _ _ _ _ _ _ ff _) (at level 0) : sol_scope.
  End Ex_Notations.


  Module Destruct_domView.

  (**
   PolyYoneda00 : View A ~> F
   Project1 : EqFunctor F G Yoneda10_transfL Yoneda10_transfR ~> Z
   Pairing : L ~> EqFunctor F G Yoneda10_transfL Yoneda10_transfR
   **)

  Inductive morCoMod_domView
  :  forall (B : obIndexer), forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F ),
        forall Yoneda10_ff : {Yoneda10 : ( forall A : obIndexer, (Yoneda00_View B) A -> Yoneda00_F A ) &
                                    Yoneda10_natural (Yoneda01_View B) Yoneda01_F Yoneda10},
          'CoMod(0 (View B) ~> F @ Yoneda10_ff )0 %sol -> Type :=

  | UnitCoMod :  forall B : obIndexer, 
      morCoMod_domView ( @uCoMod (View B) )%sol

  | PolyYoneda00 : forall (Yoneda00_F : obIndexer -> Type)
                     (Yoneda01_F : {Yoneda01
                                   : forall A A' : obIndexer,
                                     'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                                   Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                     (A : obIndexer) (f : Yoneda00_F A),
      morCoMod_domView ( (PolyYoneda00 F f) )%sol

  | Pairing : forall (B : obIndexer)
                (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0 %sol ),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0 %sol ),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, (Yoneda00_View B) A -> Yoneda00_F A &
                              Yoneda10_natural (Yoneda01_View B) Yoneda01_F Yoneda10})
                (ff : 'CoMod(0 (View B) ~> F @ Yoneda10_ff )0 %sol),
              forall Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A,
                morCoMod_domView ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >>) )%sol .

  Lemma morCoMod_domViewP
    : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F),
      forall Yoneda00_G Yoneda01_G (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
        (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 %sol ),
        ltac:( destruct F; [ | intros; refine (unit : Type) ];
                 refine (morCoMod_domView gg) ).
  Proof.
      intros. case: _ _ F _ _ G Yoneda10_gg / gg.
      - destruct F; [ | intros; exact: tt ].
        constructor 1.
      - constructor 2.
      - intros; exact: tt.
      - destruct L; [ | intros; exact: tt ].
        constructor 3.
  Defined.

  End Destruct_domView.
  
  Module Destruct_domEqFunctor.

  Inductive morCoMod_domEqFunctor
  :  forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F ),
      forall Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G ),
      forall (transfL transfR : { transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G transf }),
      forall Yoneda00_H Yoneda01_H (H : @obCoMod Yoneda00_H Yoneda01_H ),
      forall Yoneda10_hh : {Yoneda10 : ( forall A : obIndexer, Yoneda00_EqFunctor transfL transfR A -> Yoneda00_H A ) &
                                  Yoneda10_natural (Yoneda01_EqFunctor transfL transfR) Yoneda01_H Yoneda10},
        'CoMod(0 (EqFunctor F G transfL transfR) ~> H @ Yoneda10_hh )0 %sol -> Type :=

  | UnitCoMod :  forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F ),
    forall Yoneda00_G Yoneda01_G (G : @obCoMod Yoneda00_G Yoneda01_G ),
    forall (transfL transfR : { transf : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G transf }),
      morCoMod_domEqFunctor ( @uCoMod (EqFunctor F G transfL transfR) )%sol

  | Project1 : forall (Yoneda00_F : obIndexer -> Type)
                 (Yoneda01_F : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                               Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                 (Yoneda00_G : obIndexer -> Type)
                 (Yoneda01_G : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                               Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                 (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                     Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0 %sol),
               forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                 (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0 %sol),
               forall (Yoneda00_Z : obIndexer -> Type)
                 (Yoneda01_Z : {Yoneda01
                               : forall A A' : obIndexer,
                                 'Indexer(0 A' ~> A )0 -> Yoneda00_Z A -> Yoneda00_Z A' &
                               Yoneda01_functor Yoneda01}) (Z : obCoMod Yoneda01_Z)
                 (Yoneda10_zz : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_Z A &
                                Yoneda10_natural Yoneda01_F Yoneda01_Z Yoneda10})
                 (zz : 'CoMod(0 F ~> Z @ Yoneda10_zz )0 %sol),
                 morCoMod_domEqFunctor ( ~_1 @ transfL , transfR o>CoMod zz )%sol
                 
  | Pairing : forall Yoneda00_F' Yoneda01_F' (F' : @obCoMod Yoneda00_F' Yoneda01_F' ),
      forall Yoneda00_G' Yoneda01_G' (G' : @obCoMod Yoneda00_G' Yoneda01_G' ),
      forall (transfL' transfR' : { transf : ( forall A : obIndexer, Yoneda00_F' A -> Yoneda00_G' A ) &
                                        Yoneda10_natural Yoneda01_F' Yoneda01_G' transf }),
                forall (Yoneda00_F : obIndexer -> Type)
                (Yoneda01_F : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_F A -> Yoneda00_F A' &
                              Yoneda01_functor Yoneda01}) (F : obCoMod Yoneda01_F)
                (Yoneda00_G : obIndexer -> Type)
                (Yoneda01_G : {Yoneda01
                              : forall A A' : obIndexer,
                                'Indexer(0 A' ~> A )0 -> Yoneda00_G A -> Yoneda00_G A' &
                              Yoneda01_functor Yoneda01}) (G : obCoMod Yoneda01_G)
                (Yoneda10_transfL : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                    Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfL : 'CoMod(0 F ~> G @ Yoneda10_transfL )0 %sol ),
              forall (Yoneda10_transfR : {Yoneda10 : forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
                (transfR : 'CoMod(0 F ~> G @ Yoneda10_transfR )0 %sol ),
              forall (Yoneda10_ff : {Yoneda10 : forall A : obIndexer, (Yoneda00_EqFunctor transfL' transfR') A -> Yoneda00_F A &
                              Yoneda10_natural (Yoneda01_EqFunctor transfL' transfR') Yoneda01_F Yoneda10})
                (ff : 'CoMod(0 (EqFunctor F' G' transfL' transfR') ~> F @ Yoneda10_ff )0 %sol ),
              forall (Yoneda10_ff_eq : forall A : obIndexer,
                                 projT1 Yoneda10_transfL A \o projT1 Yoneda10_ff A
                                 =1 projT1 Yoneda10_transfR A \o projT1 Yoneda10_ff A),
                morCoMod_domEqFunctor ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> )%sol .

  Lemma morCoMod_domEqFunctorP
    : forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F),
      forall Yoneda00_G Yoneda01_G (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
        (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 %sol ),
        ltac:( destruct F; [ intros; refine (unit : Type) | ];
                 refine (morCoMod_domEqFunctor gg) ).
  Proof.
      intros. case: _ _ F _ _ G Yoneda10_gg / gg.
      - destruct F; [ intros; exact: tt | ].
        constructor 1.
      - intros; exact: tt.
      - constructor 2.
      - destruct L; [ intros; exact: tt | ].
        constructor 3.
  Defined.

  End Destruct_domEqFunctor.

  Definition toCoMod :
     forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F),
      forall Yoneda00_G Yoneda01_G (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
        (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 %sol ), 'CoMod(0 F ~> G @ Yoneda10_gg )0 .
  Proof.
    (move => Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg gg);
      elim : Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_gg / gg =>
    [ ? ? F
    | ? ? F A f
    | ? ? F ? ? G ? transfL transfLSol ? transfR transfRSol ? ? Z ? zz zzSol
    | ? ? L ? ? F ? ? G ? transfL transfLSol ? transfR transfRSol ? ff ffSol Yoneda10_ff_eq ];
      [ apply: (@uCoMod F)
      | apply: (EQUALIZERS.PolyYoneda00 F f)
      | apply: ( ~_1 @ transfLSol , transfRSol o>CoMod zzSol)
      | apply: ( << ffSol ,CoMod Yoneda10_ff_eq @ transfLSol , transfRSol >> )].
  Defined.
  
End Sol.

Module Resolve.

  Import Sol.Ex_Notations.
  
  Ltac tac_reduce :=
    simpl in *; (* abstract *) (intuition (try subst; eauto 9)).

  Fixpoint solveCoMod len {struct len} :
     forall Yoneda00_F Yoneda01_F (F : @obCoMod Yoneda00_F Yoneda01_F),
      forall Yoneda00_G Yoneda01_G (G : obCoMod Yoneda01_G),
      forall (Yoneda10_gg : {Yoneda10 : ( forall A : obIndexer, Yoneda00_F A -> Yoneda00_G A ) &
                                   Yoneda10_natural Yoneda01_F Yoneda01_G Yoneda10})
        (gg : 'CoMod(0 F ~> G @ Yoneda10_gg )0 ),
      forall (H_grade : (grade gg <= len)%coq_nat),
        { Yoneda10_ggSol : _ & { ggSol : 'CoMod(0 F ~> G @ Yoneda10_ggSol )0 %sol
                                      & (Sol.toCoMod ggSol) <~~ gg } }.
  Proof.
    case : len => [ | len ].

    (* len is O *)
    - ( move => ? ? F ? ? G ? gg grade_gg ); exfalso;
        abstract tac_degrade grade_gg.

    (* len is (S len) *)
    - move => ? ? F ? ? G Yoneda10_gg gg; case : _ _ F _ _ G Yoneda10_gg / gg =>
      [ Yoneda00_F Yoneda01_F F Yoneda00_F' Yoneda01_F' F' Yoneda10_ff' ff' Yoneda00_F'' Yoneda01_F'' F'' Yoneda10_ff_ ff_  (* ff_ o>CoMod ff' *)
      | Yoneda00_F Yoneda01_F F (* @uCoMod F *)
      | Yoneda00_F Yoneda01_F F A f (* PolyYoneda00 F f *)
      | Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G transf A Yoneda10_ff ff (* ff o>Transf_ transf @ G *)
      | Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR Yoneda00_Z Yoneda01_Z Z Yoneda10_zz zz (* ~_1 @ transfL , transfR o>CoMod zz *)
      | Yoneda00_L Yoneda01_L L Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR  Yoneda10_ff ff Yoneda10_ff_eq (* << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> *) ] grade_gg .
    
      (* gg is ff_ o>CoMod ff' *)
      + all: cycle 1. 

      (* gg is @uCoMod F *)
      + eexists. exists (@uCoMod F)%sol. apply: convCoMod_Refl.

      (* gg is PolyYoneda00 F f *)
      + eexists. exists (Sol.PolyYoneda00 F f)%sol. apply: convCoMod_Refl.

      (* gg is ff o>Transf_ transf @ G *)
      + case : (solveCoMod len _ _ _ _ _ _ _ ff) => [ | Yoneda10_ffSol [ffSol ffSol_prop] ];
        first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' ffSol_prop) => ffSol_prop_eq; subst.
        clear - solveCoMod grade_gg ffSol_prop.
        move: (Sol.Destruct_domView.morCoMod_domViewP ffSol) => ffSol_domViewP.
        destruct ffSol_domViewP as
            [ B (* @uCoMod (View B) *)
            | Yoneda00_F Yoneda01_F F A f (* PolyYoneda00 F f *)
            | B Yoneda00_F Yoneda01_F F _Yoneda00_G _Yoneda01_G _G Yoneda10_transfL transfL Yoneda10_transfR transfR  _Yoneda10_ff _ff _Yoneda10_ff_eq (* << _ff ,CoMod _Yoneda10_ff_eq @ transfL , transfR >> *) ] .
        
        * eexists. exists ( Sol.PolyYoneda00 G (projT1 transf _ (@unitIndexer B)) )%sol.
          clear -ffSol_prop.
          simpl in *; eapply convCoMod_Trans with (uTrans := (uCoMod) o>Transf_ transf ); abstract tac_reduce.

        * eexists. exists ( Sol.PolyYoneda00 G (projT1 transf _ f) )%sol.
          clear -ffSol_prop.
          simpl in *; eapply convCoMod_Trans with (uTrans := (PolyYoneda00 F f) o>Transf_ transf ); abstract tac_reduce.

        * eexists. exists ( Sol.PolyYoneda00 _ (projT1 transf _ (Yoneda10_eq_Yoneda00_EqFunctor _Yoneda10_ff_eq) ) )%sol.
          clear -ffSol_prop.
          simpl in *; eapply convCoMod_Trans with (uTrans := ( << Sol.toCoMod _ff ,CoMod _Yoneda10_ff_eq @ Sol.toCoMod transfL , Sol.toCoMod transfR >> ) o>Transf_ transf ); abstract tac_reduce.

      (* gg is ~_1 @ transfL , transfR o>CoMod zz *)
      + case: (solveCoMod len _ _ _ _ _ _ _ transfL) => [ | Yoneda10_transfLSol [ transfLSol transfLSol_prop ] ]; first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' transfLSol_prop) => transfLSol_prop_eq; subst.
        case: (solveCoMod len _ _ _ _ _ _ _ transfR) => [ | Yoneda10_transfRSol [ transfRSol transfRSol_prop ] ]; first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' transfRSol_prop) => transfRSol_prop_eq; subst.
        case: (solveCoMod len _ _ _ _ _ _ _ zz) => [ | Yoneda10_zzSol [ zzSol zzSol_prop ] ]; first by abstract tac_degrade grade_gg.
        eexists. exists ( ~_1 @ transfLSol , transfRSol o>CoMod zzSol )%sol.
        clear - transfLSol_prop transfRSol_prop zzSol_prop. Time abstract tac_reduce.
        
      (* gg is  << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> *)
      + case: (solveCoMod len _ _ _ _ _ _ _ transfL) => [ | Yoneda10_transfLSol [ transfLSol transfLSol_prop ] ]; first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' transfLSol_prop) => transfLSol_prop_eq; subst.
        case: (solveCoMod len _ _ _ _ _ _ _ transfR) => [ | Yoneda10_transfRSol [ transfRSol transfRSol_prop ] ]; first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' transfRSol_prop) => transfRSol_prop_eq; subst.
        move: (solveCoMod len _ _ _ _ _ _ _ ff) => [ | Yoneda10_ffSol [ffSol ffSol_prop] ]; first by abstract tac_degrade grade_gg.
        move : (convCoMod_sense' ffSol_prop) => ffSol_prop_eq; subst.
        eexists. exists ( << ffSol ,CoMod Yoneda10_ff_eq @ transfLSol , transfRSol >> )%sol.
        clear - transfLSol_prop transfRSol_prop ffSol_prop. Time abstract tac_reduce.

      (* gg is ff_ o>CoMod ff' *)
      + move: (solveCoMod len _ _ _ _ _ _ _ ff_) => [ | Yoneda10_ff_Sol [ff_Sol ff_Sol_prop] ]; first by abstract tac_degrade grade_gg.
        move: (solveCoMod len _ _ _ _ _ _ _ ff') => [ | Yoneda10_ff'Sol [ff'Sol ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.

        (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  *)
        destruct ff_Sol as
        [ _Yoneda00_F _Yoneda01_F _F (* @uCoMod _F %sol *)
        | _Yoneda00_F _Yoneda01_F _F A f (* Sol.PolyYoneda00 _F f *)
        | _Yoneda00_F _Yoneda01_F _F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR Yoneda00_Z Yoneda01_Z Z Yoneda10_zz zz (* ~_1 @ transfL , transfR o>CoMod zz %sol *)
        | Yoneda00_L Yoneda01_L L _Yoneda00_F _Yoneda01_F _F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR  Yoneda10_ff ff Yoneda10_ff_eq (* << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> %sol *) ] .
        
        (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((@uCoMod _F) o>CoMod ff'Sol) *)
        * eexists. exists (ff'Sol). 
          clear -ff_Sol_prop ff'Sol_prop. 
          abstract (simpl in *; eapply convCoMod_Trans with (uTrans := (uCoMod) o>CoMod (ff')); first (by eauto);
                    eapply convCoMod_Trans with (uTrans := (uCoMod) o>CoMod (Sol.toCoMod ff'Sol)); by eauto).

        (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((Sol.PolyYoneda00 _F f) o>CoMod ff'Sol) *)
        * { destruct ff'Sol as
                [ Yoneda00_F Yoneda01_F F (* @uCoMod F %sol *)
                | Yoneda00_F Yoneda01_F F _A _f (* Sol.PolyYoneda00 F _f *)
                | Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR Yoneda00_Z Yoneda01_Z Z Yoneda10_zz zz (* ~_1 @ transfL , transfR o>CoMod zz %sol *)
                | Yoneda00_L Yoneda01_L L _Yoneda00_F _Yoneda01_F _F Yoneda00_G Yoneda01_G G Yoneda10_transfL transfL Yoneda10_transfR transfR  Yoneda10_ff ff Yoneda10_ff_eq (* << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> %sol *) ] .

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((Sol.PolyYoneda00 _F f) o>CoMod ff'Sol)  ,  is  ((Sol.PolyYoneda00 _F f) o>CoMod (@uCoMod F)) *)
            - eexists. exists ( Sol.PolyYoneda00 _ f %sol ) .
              clear -ff_Sol_prop ff'Sol_prop.
              abstract (simpl in *; eapply convCoMod_Trans with (uTrans := ( ff_) o>CoMod (uCoMod)); by eauto).
              
            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((Sol.PolyYoneda00 _F f) o>CoMod ff'Sol)  ,  is  ((Sol.PolyYoneda00 _F f) o>CoMod (Sol.PolyYoneda00 F _f)) *)
            - eexists. exists ( Sol.PolyYoneda00 F (projT1 Yoneda01_F _ _ f _f) %sol ) .
              clear -ff_Sol_prop ff'Sol_prop.
              abstract (simpl in *; eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod (ff')); first (by eauto);
                        eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod (PolyYoneda00 _ _f)); by eauto).

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((Sol.PolyYoneda00 _F f) o>CoMod ff'Sol)  ,  is  ((Sol.PolyYoneda00 _F f) o>CoMod (~_1 @ transfL , transfR o>CoMod zz)) *)
            - move: (solveCoMod len _ _ _ _ _ _ _ ( (PolyYoneda00 _ (projT1 f)) o>CoMod (Sol.toCoMod zz))) => [ | Yoneda10_ff_Sol_o_ff'Sol [ff_Sol_o_ff'Sol ff_Sol_o_ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.
              eexists. exists ( ff_Sol_o_ff'Sol ) .
              clear -ff_Sol_prop ff'Sol_prop ff_Sol_o_ff'Sol_prop.
              abstract (simpl in *; eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod (ff')); first (by eauto);
                        eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod (~_1 @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) o>CoMod (Sol.toCoMod zz))); first (by eauto);
                        eapply convCoMod_Trans with (uTrans := ( (PolyYoneda00 _ (projT1 f)) o>CoMod (Sol.toCoMod zz))); by eauto).

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((Sol.PolyYoneda00 _F f) o>CoMod ff'Sol)  ,  is  ((Sol.PolyYoneda00 _F f) o>CoMod (<< ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >>)) *)
            - move: (solveCoMod len _ _ _ _ _ _ _ ( << (PolyYoneda00 _ f) o>CoMod (Sol.toCoMod ff) ,CoMod (Yoneda10_Pairing_morphism_eq (Sol.toCoMod transfL) (Sol.toCoMod transfR) (Sol.toCoMod ff) Yoneda10_ff_eq (PolyYoneda00 _ f)) @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> )) => [ | Yoneda10_ff_Sol_o_ff'Sol [ff_Sol_o_ff'Sol ff_Sol_o_ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.
              eexists. exists ( ff_Sol_o_ff'Sol ) .
              clear -ff_Sol_prop ff'Sol_prop ff_Sol_o_ff'Sol_prop.
              abstract (simpl in *; eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod (ff')); first (by eauto);
                        eapply convCoMod_Trans with (uTrans := (PolyYoneda00 _ f) o>CoMod ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> )); first (by eauto);
                        eapply convCoMod_Trans with (uTrans := ( << (PolyYoneda00 _ f) o>CoMod (Sol.toCoMod ff) ,CoMod (Yoneda10_Pairing_morphism_eq (Sol.toCoMod transfL) (Sol.toCoMod transfR) (Sol.toCoMod ff) Yoneda10_ff_eq (PolyYoneda00 _ f)) @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> )); by eauto).
          }

        (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ((~_1 @ transfL , transfR o>CoMod zz) o>CoMod ff'Sol) *)
        * move: (solveCoMod len _ _ _ _ _ _ _ ( (Sol.toCoMod zz) o>CoMod (Sol.toCoMod ff'Sol) )) => [ | Yoneda10_ff_Sol_o_ff'Sol [ff_Sol_o_ff'Sol ff_Sol_o_ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.
          eexists. exists ( ~_1 @ transfL , transfR o>CoMod ff_Sol_o_ff'Sol )%sol .
          clear -ff_Sol_prop ff'Sol_prop ff_Sol_o_ff'Sol_prop.
          abstract (simpl in *; eapply convCoMod_Trans with (uTrans := ( ~_1 @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) o>CoMod (Sol.toCoMod zz) ) o>CoMod ff'); first (by eauto);
                    eapply convCoMod_Trans with (uTrans :=  ( ~_1 @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) o>CoMod (Sol.toCoMod zz) ) o>CoMod (Sol.toCoMod ff'Sol)); first (by eauto);
                    eapply convCoMod_Trans with (uTrans := ( ~_1 @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) o>CoMod ( (Sol.toCoMod zz) o>CoMod (Sol.toCoMod ff'Sol) ) )); by eauto).

        (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> ) o>CoMod ff'Sol ) *)
        * { move: (Sol.Destruct_domEqFunctor.morCoMod_domEqFunctorP ff'Sol) => ff'Sol_domEqFunctorP.
            destruct ff'Sol_domEqFunctorP as
                [ Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G _transfL _transfR (* @uCoMod (EqFunctor F G _transfL _transfR) *)
                | Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G _Yoneda10_transfL _transfL _Yoneda10_transfR _transfR Yoneda00_Z Yoneda01_Z Z Yoneda10_zz zz (* ~_1 @ _transfL , _transfR o>CoMod zz *)
                | Yoneda00_F' Yoneda01_F' F' Yoneda00_G' Yoneda01_G' G' transfL' transfR' Yoneda00_F Yoneda01_F F Yoneda00_G Yoneda01_G G _Yoneda10_transfL _transfL _Yoneda10_transfR _transfR  _Yoneda10_ff _ff _Yoneda10_ff_eq (* << _ff ,CoMod _Yoneda10_ff_eq @ _transfL , _transfR >> *) ] .

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> ) o>CoMod (@uCoMod (EqFunctor F G _transfL _transfR) ) *)            
            - eexists. exists ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> %sol ) .
              clear -ff_Sol_prop ff'Sol_prop.
              abstract (simpl in *; eapply convCoMod_Trans with (uTrans := ( ff_ ) o>CoMod (uCoMod)); by eauto).

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> ) o>CoMod ( ~_1 @ _transfL , _transfR o>CoMod zz ) *)            
            - move: (solveCoMod len _ _ _ _ _ _ _ ( (Sol.toCoMod ff) o>CoMod (Sol.toCoMod zz) )) => [ | Yoneda10_ff_Sol_o_ff'Sol [ff_Sol_o_ff'Sol ff_Sol_o_ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.
              eexists. exists ( ff_Sol_o_ff'Sol )%sol .
              clear -ff_Sol_prop ff'Sol_prop ff_Sol_o_ff'Sol_prop.
              (simpl in *; eapply convCoMod_Trans with (uTrans := ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod ff'); first (by eauto);
               eapply convCoMod_Trans with (uTrans := ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod ( ~_1 @ (Sol.toCoMod _transfL) , (Sol.toCoMod _transfR) o>CoMod (Sol.toCoMod zz))); first (by eauto);
               eapply convCoMod_Trans with (uTrans := ( (Sol.toCoMod ff) o>CoMod (Sol.toCoMod zz) ) ); by eauto).

            (* gg is (ff_ o>CoMod ff') , to (ff_Sol o>CoMod ff'Sol)  , is ( ( << ff ,CoMod Yoneda10_ff_eq @ transfL , transfR >> ) o>CoMod ( << _ff ,CoMod _Yoneda10_ff_eq @ _transfL , _transfR >> ) *)            
            - move: (solveCoMod len _ _ _ _ _ _ _ ( ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod (Sol.toCoMod _ff) )) => [ | Yoneda10_ff_Sol_o_ff'Sol [ff_Sol_o_ff'Sol ff_Sol_o_ff'Sol_prop] ]; first by abstract tac_degrade grade_gg.
              move : (convCoMod_sense' ff_Sol_o_ff'Sol_prop) => ff_Sol_o_ff'Sol_prop_eq; subst.
              pose HeqSol := (Yoneda10_Pairing_morphism_eq (Sol.toCoMod _transfL) (Sol.toCoMod _transfR) (Sol.toCoMod _ff) _Yoneda10_ff_eq ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> )).
              eexists. exists ( << ff_Sol_o_ff'Sol ,CoMod HeqSol @ _transfL , _transfR >> )%sol .
              clear -ff_Sol_prop ff'Sol_prop ff_Sol_o_ff'Sol_prop.
              (simpl in *; eapply convCoMod_Trans with (uTrans := ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod ff'); first (by eauto);
               eapply convCoMod_Trans with (uTrans := ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod ( << (Sol.toCoMod _ff) ,CoMod _Yoneda10_ff_eq @ (Sol.toCoMod _transfL) , (Sol.toCoMod _transfR) >> ) ); first (by eauto);
               eapply convCoMod_Trans with (uTrans :=  ( << ( ( << (Sol.toCoMod ff) ,CoMod Yoneda10_ff_eq @ (Sol.toCoMod transfL) , (Sol.toCoMod transfR) >> ) o>CoMod (Sol.toCoMod _ff) )  ,CoMod HeqSol @ (Sol.toCoMod _transfL) , (Sol.toCoMod _transfR) >> ) ); by eauto).
          } 
  Defined.

End Resolve.

End EQUALIZERS.

(**#+END_SRC

Voila. **)

